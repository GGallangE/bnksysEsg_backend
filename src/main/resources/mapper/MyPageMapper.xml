<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bnksys.esg.mapper.MyPageMapper">

    <select id = "findIntrsApi" resultType="apiResultDto">
        SELECT apilist.API_LIST_ID API_LIST_ID
             , API_NM
             , PRV_ORG
             , API_VIEW
             , API_RGDT
             , API_EXPL
             , API_KEYWORD
             , COUNT_API_USES
             , AUI.FAVORITE FAVORITE
        FROM API_LIST apilist
  INNER JOIN (
            SELECT API_LIST_ID
                 , USER_ID
                 , COUNT(*) FAVORITE
            FROM API_USER_INTRS
            WHERE USER_ID = (SELECT USER_ID FROM USER WHERE Email = #{email})
              AND STCD = "01"
            GROUP BY API_LIST_ID, USER_ID) AUI
          ON AUI.API_LIST_ID = apilist.API_LIST_ID
   LEFT JOIN (SELECT API_LIST_ID
                   , COUNT(*) COUNT_API_USES
                FROM API_USES
            GROUP BY API_LIST_ID) apiuses
          ON apilist.API_LIST_ID = apiuses.API_LIST_ID
       LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id = "findRecentUseApi">
     SELECT DISTINCT_API.API_LIST_ID API_LIST_ID
          , API_NM
          , PRV_ORG
          , API_VIEW
          , API_RGDT
          , API_KEYWORD
          , API_EXPL
          , apiusess.COUNT_API_USES_A AS COUNT_API_USES
          , AUI.FAVORITE FAVORITE
          , COUNT(*) OVER() TOTAL
       FROM (
            SELECT DISTINCT apilist.API_LIST_ID API_LIST_ID
                 , API_NM
                 , PRV_ORG
                 , API_VIEW
                 , API_RGDT
                 , API_KEYWORD
                 , API_EXPL
            FROM API_LIST apilist
      INNER JOIN API_USES apiuses
              ON apilist.API_LIST_ID = apiuses.API_LIST_ID
             AND apiuses.USER_ID = (SELECT USER_ID FROM USER WHERE Email = #{email}) ) DISTINCT_API
INNER JOIN (SELECT API_LIST_ID, MAX(API_USE_DATE) API_USE_DATE FROM API_USES GROUP BY API_LIST_ID) apiuses
        ON apiuses.API_LIST_ID = DISTINCT_API.API_LIST_ID
 LEFT JOIN (
            SELECT API_LIST_ID
                 , USER_ID
                 , COUNT(*) OVER (PARTITION BY API_LIST_ID, USER_ID) AS FAVORITE
              FROM API_USER_INTRS
             WHERE USER_ID = (SELECT USER_ID FROM USER WHERE Email = #{email})
               AND STCD = "01") AUI
        ON AUI.API_LIST_ID = DISTINCT_API.API_LIST_ID
LEFT JOIN (SELECT API_LIST_ID
                , count(*) COUNT_API_USES_A
           FROM API_USES
           GROUP BY API_LIST_ID ) apiusess
          ON apiusess.API_LIST_ID = DISTINCT_API.API_LIST_ID
  ORDER BY apiuses.API_USE_DATE DESC
     LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findInQuiry">
        SELECT inquiry.INQUIRY_ID INQUIRY_ID
             , INQUIRY_NM
             , INQUIRY_CNTN
             , REG_DT
             , PARENT_ID
             , inquiry.USER_ID USER_ID
             , user.USER_NAME USER_NAME
             , reply.REPLY_COUNT REPLY_COUNT
             , COUNT(*) OVER() TOTAL
          FROM INQUIRY inquiry
    INNER JOIN USER user
            ON user.USER_ID = inquiry.USER_ID
     LEFT JOIN (SELECT inquiry1.INQUIRY_ID INQUIRY_ID
                     , COUNT(*) REPLY_COUNT
                  FROM INQUIRY inquiry1
                     , INQUIRY inquiry2
                 WHERE inquiry1.INQUIRY_ID = inquiry2.PARENT_ID
              GROUP BY inquiry1.INQUIRY_ID) reply
            ON inquiry.INQUIRY_ID = reply.INQUIRY_ID
         WHERE EMAIL = #{email}
           AND inquiry.PARENT_ID IS NULL
     ORDER BY INQUIRY_ID DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id = "findAnswerInQuiry">
        SELECT INQUIRY_ID
             , INQUIRY_NM
             , INQUIRY_CNTN
             , REG_DT
             , PARENT_ID
             , inquiry.USER_ID USER_ID
             , user.USER_NAME USER_NAME
          FROM INQUIRY inquiry
    INNER JOIN USER user
            ON user.USER_ID = inquiry.USER_ID
         WHERE PARENT_ID IN (SELECT INQUIRY_ID FROM INQUIRY WHERE USER_ID IN (
                                    SELECT USER_ID FROM USER WHERE EMAIL = #{email}))
           AND PARENT_ID = #{inquiryid}
    </select>

    <select id = "findApiApply">
        SELECT apiapply.API_APPLY_ID API_APPLY_ID
             , apiapply.USER_ID
             , APPLY_NM
             , APPLY_CNTN
             , APPLY_DATE
             , RPLY_DATE
             , APPLY_DVCD
             , user.USER_NAME USER_NAME
             , COUNT(*) OVER() TOTAL
          FROM API_APPLY apiapply
    INNER JOIN USER user
            ON user.USER_ID = apiapply.USER_ID
           AND user.EMAIL = #{email}
         LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findDetailApiApply">
        SELECT apiapply.API_APPLY_ID API_APPLY_ID
             , apiapply.USER_ID
             , APPLY_NM
             , APPLY_CNTN
             , APPLY_DATE
             , RPLY_DATE
             , APPLY_DVCD
             , user.USER_NAME USER_NAME
          FROM API_APPLY apiapply
    INNER JOIN USER user
            ON user.USER_ID = apiapply.USER_ID
           AND user.EMAIL = #{email}
         WHERE apiapply.API_APPLY_ID = #{apiapplyid}
    </select>

    <select id = "findApiSchedule">
        SELECT BATCH_LIST_ID
             , batchlist.USER_ID USER_ID
             , batchlist.API_LIST_ID
             , API_FORMAT
             , FREQUENCY
             , TIME
             , DAY_OF_WEEK
             , DAY_OF_MONTH
             , STCD
             , apilist.API_NM apinm
             , COUNT(*) OVER() TOTAL
          FROM BATCH_LIST batchlist
    INNER JOIN API_LIST apilist
            ON apilist.API_LIST_ID = batchlist.API_LIST_ID
         WHERE batchlist.USER_ID = #{userid}
           AND batchlist.STCD = "01"
        <if test="batchlistid != null">
           AND BATCH_LIST_ID = #{batchlistid}
        </if>
      ORDER BY BATCH_LIST_ID DESC
         LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id = "findAlarm">
        SELECT ALARM_ID
             , TITLE
             , CONTENT
             , REG_DT
             , READ_CHECK
             , send_user.USER_ID SEND_USER
             , rcv_user.USER_ID RCV_USER
             , send_user.USER_NAME SEND_USERNAME
             , rcv_user.USER_NAME RCV_USERNAME
             , COUNT(*) OVER() TOTAL
          FROM ALARM alarm
    INNER JOIN USER send_user
            ON send_user.USER_ID = alarm.SEND_USER
    INNER JOIN USER rcv_user
            ON rcv_user.USER_ID = alarm.RCV_USER
           AND alarm.RCV_USER = #{userid}
         WHERE 1 = 1
        <if test="alarmid != null">
           AND ALARM_ID = #{alarmid}
        </if>
      ORDER BY ALARM_ID DESC
         LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id = "findDetailList">
      SELECT *
        FROM BATCH_DETAIL_LIST
       WHERE BATCH_LIST_ID = #{batchlistid}
         AND STCD = "01"
    </select>

    <select id = "getNotReadAlarmCount">
        SELECT COUNT(*) COUNT
          FROM ALARM
         WHERE RCV_USER = #{userid}
           AND READ_CHECK = FALSE
    </select>

    <select id = "isSameApiScheduleUser">
        SELECT COUNT(*)
          FROM BATCH_LIST
         WHERE BATCH_LIST_ID = #{batchlistid}
           AND USER_ID = (SELECT USER_ID FROM USER WHERE EMAIL = #{email})
    </select>

    <update id = "deleteApiSchedule">
        UPDATE BATCH_LIST
           SET STCD = "99"
         WHERE USER_ID = #{userid}
           AND BATCH_LIST_ID = #{batchlistid}
    </update>

    <insert id = "save_BatchDetail">
        INSERT INTO BATCH_DETAIL_LIST (BATCH_LIST_ID, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, STCD, FST_RGRP, FST_RG_DTTI, LST_CHPR, LST_CH_DTTI)
        VALUES (#{detail.batchListId} , #{detail.arg1}, #{detail.arg2}, #{detail.arg3}, #{detail.arg4}, #{detail.arg5}, #{detail.arg6}, #{detail.arg7}
               , #{detail.arg8}, #{detail.arg9}, #{detail.arg10}, "01"
               , #{userid}
               , CONCAT(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), LPAD(FLOOR(EXTRACT(MICROSECOND FROM SYSDATE(3)) / 1000), 3, '0'))
               , #{userid}
               , CONCAT(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), LPAD(FLOOR(EXTRACT(MICROSECOND FROM SYSDATE(3)) / 1000), 3, '0')))
    </insert>

    <update id = "updateApiScheduleTime">
        UPDATE BATCH_LIST
           SET BATCH_TIME = #{batchlistDto.batchtime}
             , FREQUENCY = #{batchlistDto.frequency}
             , TIME = #{batchlistDto.time}
             , DAY_OF_WEEK = #{batchlistDto.dayofweek}
             , DAY_OF_MONTH = #{batchlistDto.dayofmonth}
             , API_FORMAT = #{batchlistDto.apiformat}
             , LST_CHPR = #{userid}
             , LST_CH_DTTI = CONCAT(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), LPAD(FLOOR(EXTRACT(MICROSECOND FROM SYSDATE(3)) / 1000), 3, '0'))
         WHERE USER_ID = #{userid}
           AND BATCH_LIST_ID = #{batchlistDto.batchlistid}
    </update>

    <update id = "update_readAlarm">
        UPDATE ALARM
           SET READ_CHECK = TRUE
             , LST_CHPR = #{userid}
             , LST_CH_DTTI = CONCAT(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), LPAD(FLOOR(EXTRACT(MICROSECOND FROM SYSDATE(3)) / 1000), 3, '0'))
         WHERE ALARM_ID = #{alarmid}
           AND RCV_USER = #{userid}
    </update>

    <update id = "update_BatchDetail">
        UPDATE BATCH_DETAIL_LIST
           SET ARG1 = #{detail.arg1}
             , ARG2 = #{detail.arg2}
             , ARG3 = #{detail.arg3}
             , ARG4 = #{detail.arg4}
             , ARG5 = #{detail.arg5}
             , ARG6 = #{detail.arg6}
             , ARG7 = #{detail.arg7}
             , ARG8 = #{detail.arg8}
             , ARG9 = #{detail.arg9}
             , ARG10 = #{detail.arg10}
             , STCD = #{detail.stcd}
             , LST_CHPR = #{userid}
             , LST_CH_DTTI = CONCAT(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), LPAD(FLOOR(EXTRACT(MICROSECOND FROM SYSDATE(3)) / 1000), 3, '0'))
         WHERE BATCH_DETAIL_LIST_ID = #{detail.batchDetailListId}
    </update>

</mapper>